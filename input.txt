Analyze the below an open book coding assessment, for first-time programmers learning JavaScript, and generate testcases, 5 for the first four problems and 10 for the last problem, for an overall effective assessment of the solution provided by students. Provide explanations for each test case and the edge conditions it tests. Give the output in markdown table format.



# Module 4 Open Book Assessment 

(2 hours, 15+15+20+20+30 marks) 

You can visit only the official JavaScript documentation during the test [here](https://developer.mozilla.org/en-US/docs/Web/JavaScript). 


## Question 1: Vowel Replacement (15 marks)

Write a JavaScript function called _replaceVowels_ that takes a string as input and replaces all occurrences of vowels with specific characters. The function should replace and return the modified string:

- a with #

- e with &

- i with !

- o with @

- u with $

_Example Test Cases:_

Input: "Hello, World!" 

Output: "H\&ll@, W\@rld!"

Input: "JavaScript is awesome!" 

Output: "J#v#Scr!pt !s #w\&s\@m&!"

Input: "This is a test." 

Output: "Th!s !s # t\&st."

_Explanation of Test Cases:_

Test Case 1: 'e' is replaced with '&', 'o' is replaced with '@'.

Test Case 2: 'a' is replaced with '#', 'e' is replaced with '&', 'i' is replaced with '!', 'o' is replaced with '@', 'u' is replaced with '$'.

Test Case 3: 'i' is replaced with '!', 'a' is replaced with '#', 'e' is replaced with '&'.


## Question 2: Capitalize the First Letter of Each Word (15 marks)

Write a JavaScript function named _capitalizeWords_ that takes a string as input and returns a new string where the first letter of each word is capitalized while keeping the rest of the letters in lowercase.

**_Input Format_**: A string containing one or more words separated by spaces.

**_Output Format_**: A new string with the first letter of each word capitalized and the rest of the letters in lowercase.

_Example Test Cases:_

Input: "the quick brown fox jumps over the lazy dog"

Expected Output: "The Quick Brown Fox Jumps Over The Lazy Dog"

_Explanation_: Capitalizes the first letter of each word.

Input: "javascript is awesome"

Expected Output: "JavaScript Is Awesome"

_Explanation_: Capitalizes the first letter of "javascript" and "awesome".

Input: " hello world! "

Expected Output: " Hello World! "

_Explanation_: Capitalizes the first letter of "hello" and "world" and preserves leading and trailing spaces (there’s a space before “hello” and after “world!”, you need to keep it in the output)


## Question 3: Reverse Words in a Sentence (20 marks)

Write a JavaScript function named _reverseSentence_ that takes a string representing a sentence as input. The function should:

1. Split the input sentence into individual words.

2. Reverse the order of the words.

3. Join the reversed words back into a new sentence, separated by spaces.

4. Return the new reversed sentence as a string.

**_Input Format_**: A string representing a sentence.

**_Output Format_**: A string representing the sentence with the word order reversed.

_Example Test Cases:_

_Input: "Hello World, how are you?"___

_Expected Output: "you? are how World, Hello"_

_Explanation: The sentence is reversed, preserving punctuation and capitalization._

_Input: "JavaScript is awesome"_

_Expected Output: "awesome is JavaScript"_

_Explanation: The order of the words "JavaScript", "is", and "awesome" is reversed._

_Input: " This sentence has extra spaces. "_

_Expected Output: "spaces. extra has sentence This"_

_Explanation: Extra spaces between words are ignored during splitting and joining._


## Question 4: Find the First Student with a Specific Grade (20 marks)

You are tasked with building a system for managing student records. One of the core functionalities is to efficiently find specific students based on their academic performance. Implement a function named _findTargetGrade_ that takes an array of student objects and a target grade as input. The function should return the name of the first student in the array who has the specified grade. If no student with the target grade exists, the function should return "Student not found".

**_Input Format_**: The input will be provided as two arguments (you can hardcode them for testing your function)

- students: An array of objects, where each object represents a student and has the following properties:

  - name: A string representing the student's name.

  - grade: An integer representing the student's grade.

- targetGrade: An integer representing the grade to search for.

_Sample Input:_

    const students = [
      { name: "John", grade: 90 },
      { name: "Alice", grade: 80 },
      { name: "Bob", grade: 90 },
      { name: "Eve", grade: 70 }
    ];

    const targetGrade = 90;

**_Output Format_**: The function should return a string representing the name of the first student with the target grade. If no student with the target grade exists, the function should return "Student not found".

_Sample Output:_

    "John"

_Note: You are encouraged to use your knowledge of array methods. Choose the most appropriate JavaScript methods and techniques to solve this problem._

_Expected Test Cases:_

_Test Case 1:_

_Input:_

students: \[ { name: "John", grade: 90 }, { name: "Alice", grade: 80 }, { name: "Bob", grade: 90 }, { name: "Eve", grade: 70 } ]

targetGrade: 90

_Expected Output:_ "John"

_Explanation: Both John and Bob have the target grade, but John is placed before Bob in the array._ 

_Test Case 2:_

_Input:_

students: \[ { name: "John", grade: 90 }, { name: "Alice", grade: 80 }, { name: "Bob", grade: 90 }, { name: "Eve", grade: 70 } ]

targetGrade: 85

_Expected Output:_ "Student not found"

_Explanation: No students were found with a target grade of 85._

_Test Case 3:_

_Input:_

students: \[ { name: "John", grade: 90 }, { name: "Alice", grade: 80 }, { name: "Bob", grade: 90 }, { name: "Eve", grade: 70 } ]

targetGrade: 70

_Expected Output:_ "Eve"

_Explanation: Eve has the target grade._


## Question 5: Find Students Enrolled for a Particular Course (30 marks)

You are tasked with building a system to manage student records, including their academic performance and course enrollment. You need to implement a function named _enrolledStudents_ that takes an array of student objects and returns an array containing the names of all students enrolled in a specific course.

**_Input Format_**: The input will be provided as two arguments (you can hardcode them for testing your function)

- students: An array of objects, where each object represents a student and has the following properties:

  - name: A string representing the student's name.

  - courses: An array of strings representing the courses the student is enrolled in.

- targetCourse: A string representing the course to filter by.

_Sample Input:_

    const students = [
      { name: "John", courses: ["Math", "Science", "History"] },
      { name: "Alice", courses: ["Science", "English", "Art"] },
      { name: "Bob", courses: ["Math", "History", "Music"] },
      { name: "Eve", courses: ["Science", "English"] }
    ];

    const targetCourse = "Science";

**_Output Format_**: The function should return a new array containing the names of the students enrolled in the targetCourse. If no students are found enrolled in the targetCourse, the function should return an empty array.

_Sample Output:_

    ["John", "Alice", "Eve"]

_Note: You are encouraged to use your knowledge of array methods. Choose the most appropriate JavaScript methods and techniques to solve this problem._

_Example Test Cases:_

_Test Case 1:_

_Input_:

students: \[ { name: "John", courses: \["Math", "Science", "History"] }, { name: "Alice", courses: \["Science", "English", "Art"] }, { name: "Bob", courses: \["Math", "History", "Music"] }, { name: "Eve", courses: \["Science", "English"] } ]

targetCourse: "Science"

_Expected Output:_ \["John", "Alice", "Eve"]

_Explanation: Everyone except Bod has enrolled for “Science.”_

_Test Case 2:_

_Input:_

students: \[ { name: "John", courses: \["Math", "Science", "History"] }, { name: "Alice", courses: \["Science", "English", "Art"] }, { name: "Bob", courses: \["Math", "History", "Music"] }, { name: "Eve", courses: \["Science", "English"] } ]

targetCourse: "Music"

_Expected Output:_ \["Bob"]

_Explanation: Only Bob has enrolled for “Music.”_

_Test Case 3:_

_Input:_

students: \[ { name: "John", courses: \["Math", "Science", "History"] }, { name: "Alice", courses: \["Science", "English", "Art"] }, { name: "Bob", courses: \["Math", "History", "Music"] }, { name: "Eve", courses: \["Science", "English"] } ]

targetCourse: "Physics"

_Expected Output:_ \[]

_Explanation: No one has enrolled for “Physics.”_
