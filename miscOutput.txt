## Building a To-Do List App with React

This guide will walk you through building a simple To-Do List app using React. You'll practice fundamental concepts like components, state management, event handling, and basic styling. 

### Phase 1: Setting Up the Project

**Step 1: Create a React App**

- Open your terminal and run:

```bash
npx create-react-app todo-app
cd todo-app
```

**Step 2: Clean Up**

- Delete unnecessary files: `src/App.test.js`, `src/logo.svg`, `src/setupTests.js`.
- Clear the contents of `src/App.css` and `src/index.css`.
- Replace the contents of `src/App.js` with a simple React functional component:

```jsx
import React from "react";

function App() {
  return (
    <div>
      <h1>My To-Do List</h1> 
      {/* Your app content will go here */}
    </div>
  );
}

export default App;
```

### Phase 2: Building the Components

Let's think about the structure of your To-Do list app. We'll need components for:

- **`Task`**:  Displays a single task (text, completion status, delete button).
- **`TaskList`**:  Renders a list of `Task` components.
- **`TaskForm`**: Handles adding new tasks to the list.

**Step 3: Create the `Task` Component**

- Create a new file: `src/components/Task.js`.
- Implement the `Task` component:

```jsx
// src/components/Task.js
import React from "react";

function Task({ task, onDelete, onToggle }) {
  return ( 
    <li> 
      <input 
        type="checkbox" 
        checked={task.completed} 
        onChange={() => onToggle(task.id)} 
      />
      <span className={task.completed ? 'completed' : ''}>{task.text}</span> 
      <button onClick={() => onDelete(task.id)}>Delete</button>
    </li>
  );
}

export default Task;
```

**Explanation:**
- The `Task` component receives the `task` object, `onDelete`, and `onToggle` functions as **props** from its parent component (`TaskList`).
- The `checked` attribute of the checkbox is dynamically set based on the `task.completed` value.
- The `onChange` event handler calls the `onToggle` function (passed from `TaskList`) with the `task.id`, allowing the parent component to update the task's completion status.
- The `onDelete` function is similarly called when the "Delete" button is clicked.

**Step 4: Create the `TaskList` Component**

- Create a new file: `src/components/TaskList.js`.
- This component will receive an array of tasks and render individual `Task` components:

```jsx
// src/components/TaskList.js
import React from "react";
import Task from "./Task";

function TaskList({ tasks, onDelete, onToggle }) {
  return ( 
    <ul>
      {tasks.map((task) => (
        <Task 
          key={task.id} 
          task={task} 
          onDelete={onDelete} 
          onToggle={onToggle} 
        />
      ))}
    </ul> 
  );
}

export default TaskList;
```

**Explanation:**
- The `TaskList` component receives the `tasks` array, `onDelete`, and `onToggle` functions as props.
- It uses the `.map()` method to iterate over the `tasks` array and render a `Task` component for each task object.
- A unique `key` prop is assigned to each `Task` component (using `task.id`) to help React efficiently update the list.

**Step 5: Create the `TaskForm` Component**

- Create a new file: `src/components/TaskForm.js`.
- This component will manage a form for adding new tasks:

```jsx
// src/components/TaskForm.js
import React, { useState } from "react";

function TaskForm({ onAddTask }) {
  const [newTask, setNewTask] = useState("");

  const handleSubmit = (e) => {
    e.preventDefault(); 
    if (newTask.trim() !== "") { // Basic validation - don't add empty tasks
      onAddTask(newTask);
      setNewTask(""); 
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <input 
        type="text" 
        placeholder="Add a new task"
        value={newTask} 
        onChange={(e) => setNewTask(e.target.value)} 
      />
      <button type="submit">Add</button>
    </form>
  );
}

export default TaskForm;
```

**Explanation:**
- **`useState` Hook:**  The `useState("")` hook is used to manage the value of the input field. `newTask` holds the current input value, and `setNewTask` is the function used to update it. 
- **Form Submission:**
    - The `handleSubmit` function is called when the form is submitted. 
    - `e.preventDefault()` prevents the default form submission behavior (page reload).
    - Basic validation: We check if the new task is not just empty spaces.
    - If valid, the `onAddTask` function (passed from `App.js`) is called with the `newTask`, allowing the parent component to add the new task to the list.
    - The input field is cleared by setting `newTask` back to an empty string.
- **Controlled Component:** The `value` of the input field is linked to the `newTask` state variable. When the input changes, `setNewTask` updates the state, and React re-renders the component with the new value in the input.

### Phase 3: Managing State and Logic

**Step 6: Update `App.js` to Manage Tasks**

- In `src/App.js`, you'll manage the application's state (the list of tasks) and pass data and functions down to the child components.

```jsx
// src/App.js
import React, { useState } from "react";
import TaskList from "./components/TaskList";
import TaskForm from "./components/TaskForm";

function App() {
  const [tasks, setTasks] = useState([
    // You can add initial tasks here if you like
    // { id: 1, text: "Learn React", completed: false },
    // { id: 2, text: "Build a To-Do app", completed: true }
  ]);

  const addTask = (newTaskText) => {
    setTasks([
      ...tasks,
      { id: Date.now(), text: newTaskText, completed: false },
    ]);
  };

  const deleteTask = (taskId) => {
    setTasks(tasks.filter((task) => task.id !== taskId));
  };

  const toggleTaskCompletion = (taskId) => {
    setTasks(
      tasks.map((task) =>
        task.id === taskId ? { ...task, completed: !task.completed } : task
      )
    );
  };

  return (
    <div>
      <h1>My To-Do List</h1> 
      <TaskForm onAddTask={addTask} />
      <TaskList tasks={tasks} onDelete={deleteTask} onToggle={toggleTaskCompletion} />
    </div>
  );
}

export default App;
```

**Explanation:**
- **`tasks` State:**  The `useState([])` hook initializes an array called `tasks` to hold all the tasks in the app. Each task will be an object with `id`, `text`, and `completed` properties. 
- **`addTask` Function:**
    - Takes the `newTaskText` from `TaskForm` as input.
    - Updates the `tasks` state by creating a new array:
        - It spreads (`...`) the existing `tasks`.
        - Adds a new task object with a unique `id` generated using `Date.now()`, the new task text, and `completed` set to `false`.
- **`deleteTask` Function:**
    - Takes the `taskId` to be deleted as input.
    - Filters the `tasks` array to keep only tasks whose `id` does not match the `taskId` to be deleted.
- **`toggleTaskCompletion` Function:**
    - Takes the `taskId` of the task to toggle as input.
    - Maps over the `tasks` array:
        - If the `task.id` matches the `taskId`, it creates a new task object with the `completed` property toggled (`!task.completed`).
        - If the `id` doesn't match, it returns the original task object.

### Phase 4: Styling (Optional)

**Step 7: Add CSS for Basic Styling**

- Add styles to `src/App.css` and import them into `src/App.js`:

```css
/* src/App.css */
body {
  font-family: sans-serif;
}

.task {
  margin-bottom: 10px;
}

.completed {
  text-decoration: line-through;
  color: lightgray;
}
```

```jsx
// src/App.js 
// ... other imports
import './App.css';

// ... rest of your App component
```

### Phase 5: Running and Testing the App

**Step 8: Start the Development Server**

- In your terminal, run:

```bash
npm start
```

- This will open the app in your browser. 

**Step 9: Thoroughly Test Your App**
-  Add tasks, mark them as complete, delete them, and make sure your app behaves as expected.

**Additional Considerations:**
- **Error Handling:** For a real-world application, you would add error handling (e.g., if fetching tasks from a server fails) and more robust input validation.
- **Advanced Styling:** Explore CSS Modules or Styled-Components for more organized styles in larger projects.
- **Testing:**  Learn about testing React components using a testing library like Jest.
- **Accessibility:** Ensure your app is accessible by following accessibility best practices (using semantic HTML, ARIA attributes, keyboard navigation, etc.). 
